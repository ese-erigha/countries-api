version: '3.7'

services:
  flask_api:
    build:
      context:  ./services/flask
      dockerfile: Dockerfile
    container_name: flask_api # Do not use when in a swarm; cannot scale a service beyond 1 container if you have specified a custom name
    volumes:
      - ./services/flask/:/usr/src/app/
    ports: 
      - "5000:5000"
    env_file:
      - dev.env
    environment:
      - MODE=${MODE}
      - AUTH_TOKEN=${AUTH_TOKEN}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      - mongodb
      - elasticsearch
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.4
    container_name: mongodb
    volumes:
      - mongodb_data:/data/db
    expose:
      - "27017"
    env_file:
      - dev.env
    environment:
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - backend

  mongo_express:
    image: mongo-express
    container_name: mongo_express
    ports:
      - "8085:8081"
    env_file:
      - dev.env
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=${DATABASE_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${DATABASE_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_HOST}
      - ME_CONFIG_MONGODB_PORT=${MONGO_PORT}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - mongodb
    networks:
      - backend

  nginx:
    container_name: nginx
    build:
      context:  ./services/nginx
      dockerfile: Dockerfile
    ports: 
      - "80:80"
      - "443:443"
    depends_on:
      - flask_api
    networks:
      - frontend
      - backend

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: ${ELK_VERSION}
    env_file:
      - dev.env
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
      ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME}
      ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
      ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
      ES_JAVA_OPTS: -Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP}
      bootstrap.memory_lock: "true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 200000
        hard: 200000
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    secrets:
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: elastic.certificates
        target: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    expose:
      - "9200"
      - "9300"
    networks:
      - backend

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: ${ELK_VERSION}
    ports:
      - 5605:5601
    depends_on:
      - elasticsearch
    env_file:
      - dev.env
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: ${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    networks:
      - backend

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELK_VERSION: ${ELK_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    env_file:
      - dev.env
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: ${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP}"
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  elasticsearch-data:
    driver: local
  mongodb_data:
    driver: local

secrets:
  elasticsearch.keystore:
    file: ./secrets/elasticsearch.keystore
  elastic.certificates:
    file: ./secrets/elastic-certificates.p12
